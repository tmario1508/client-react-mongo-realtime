{"version":3,"sources":["URLs.js","styles.js","components/ThoughtCard.js","components/ThoughtList.js","App.js","index.js"],"names":["URLs","baseURL","socketURL","theme","name","color","button","backgroundColor","greenButton","redButton","card","minWidth","cardHeader","textAlign","cardContent","cardActions","justifyContent","withStyles","styles","props","classes","Card","className","CardHeader","title","titleTypographyProps","variant","CardContent","Typography","description","ThoughtList","thoughts","map","thought","index","Grid","item","key","App","state","showAddDialog","nameError","descriptionError","nameErrorMsg","descriptionErrorMsg","componentDidMount","a","socket","io","on","setState","id","updatedThoughts","filter","_id","fetchThoughts","axios","get","response","data","success","console","log","message","alert","toggleAddDialog","handleChange","event","value","target","property","length","substr","handleInputValidation","valid","whitespaceMsg","input","replace","addThought","post","this","Fragment","Dialog","open","onClose","DialogTitle","style","fontWeight","DialogContent","container","justify","alignItems","spacing","xs","TextField","fullWidth","label","size","onChange","error","helperText","multiline","DialogActions","Button","onClick","direction","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f339ea24.chunk.js","sourcesContent":["let URLs = {};\n\nif (process.env.NODE_ENV === \"production\") {\n  URLs = {\n    baseURL: \"/api\",\n    socketURL: \"https://thoughtwall.herokuapp.com/api\",\n  };\n} else {\n  URLs = {\n    baseURL: \"http://localhost:5000/api\",\n    socketURL: \"http://localhost:5000/api\",\n  };\n}\n\nexport default URLs;\n","export default (theme) => ({\n  name: {\n    color: \"white\",\n  },\n  button: {\n    backgroundColor: \"#F37335\",\n    color: \"white\",\n  },\n  greenButton: {\n    backgroundColor: \"rgb(0, 204, 0)\",\n    color: \"white\",\n    \"&:hover\": {\n      backgroundColor: \"rgb(0, 204, 0)\",\n    },\n  },\n  redButton: {\n    backgroundColor: \"rgb(255, 51, 0)\",\n    color: \"white\",\n    \"&:hover\": {\n      backgroundColor: \"rgb(255, 51, 0)\",\n    },\n  },\n  card: {\n    minWidth: 150,\n  },\n  cardHeader: {\n    textAlign: \"center\",\n    backgroundColor: \"rgb(249, 122, 22)\",\n  },\n  cardContent: {\n    textAlign: \"center\",\n    backgroundColor: \"rgb(245, 146, 70)\",\n  },\n  cardActions: {\n    justifyContent: \"center\",\n  },\n});\n","import React from \"react\";\nimport {\n  withStyles,\n  Typography,\n  Card,\n  CardHeader,\n  CardContent,\n} from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport styles from \"../styles\";\n\nconst ThoughtCard = (props) => {\n  const classes = props.classes;\n\n  return (\n    <Card className={classes.card}>\n      <CardHeader\n        title={props.name}\n        titleTypographyProps={{ variant: \"h5\" }}\n        className={classes.cardHeader}\n      />\n      <CardContent className={classes.cardContent}>\n        <Typography variant=\"body1\">{props.description}</Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nThoughtCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(ThoughtCard);\n","import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport ThoughtCard from \"./ThoughtCard\";\n\nconst ThoughtList = (props) => {\n  return props.thoughts.map((thought, index) => {\n    return (\n      <Grid item>\n        <ThoughtCard\n          name={thought.name}\n          description={thought.description}\n          key={index}\n        />\n      </Grid>\n    );\n  });\n};\n\nexport default ThoughtList;\n","import React, { Component } from \"react\";\nimport {\n  Grid,\n  Typography,\n  Button,\n  withStyles,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  TextField,\n} from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport io from \"socket.io-client\";\nimport axios from \"axios\";\nimport URLs from \"./URLs\";\nimport styles from \"./styles\";\nimport ThoughtList from \"./components/ThoughtList\";\n\nclass App extends Component {\n  state = {\n    showAddDialog: false,\n    thoughts: [],\n    name: \"\",\n    description: \"\",\n    nameError: false,\n    descriptionError: false,\n    nameErrorMsg: \"\",\n    descriptionErrorMsg: \"\",\n  };\n\n  componentDidMount = async () => {\n    //socket.io connection\n    const socket = io(`${URLs.socketURL}/socket`);\n\n    socket.on(\"newPostit\", (thought) => {\n      this.setState({ thoughts: [...this.state.thoughts, thought] });\n    });\n\n    socket.on(\"deletedPostit\", (id) => {\n      const updatedThoughts = this.state.thoughts.filter((thought) => {\n        return thought._id !== id;\n      });\n\n      this.setState({ thoughts: updatedThoughts });\n    });\n\n    socket.on(\"postitsCleared\", () => {\n      this.setState({ thoughts: [] });\n    });\n\n    await this.fetchThoughts();\n  };\n\n  fetchThoughts = async () => {\n    try {\n      const response = await axios.get(`${URLs.baseURL}/wall/getPostits`);\n\n      if (response.data.success) {\n        console.log(response.data.message);\n        this.setState({ thoughts: response.data.message });\n      } else {\n        alert(response.data.message);\n      }\n    } catch (error) {\n      console.log(\"Error with fetching thoughts: \", error);\n      alert(\n        \"Error with fetching thought. Please check the console for more info.\"\n      );\n    }\n  };\n\n  toggleAddDialog = () => {\n    this.setState({ showAddDialog: !this.state.showAddDialog }, () => {\n      //if form closed, clear the text fields\n      if (!this.state.showAddDialog) {\n        this.setState({ name: \"\", description: \"\" });\n      }\n    });\n  };\n\n  handleChange = (event) => {\n    let value = event.target.value;\n    let property = event.target.name;\n\n    switch (property) {\n      case \"name\":\n        if (value.length > 20) {\n          value = value.substr(0, 20);\n        }\n        this.setState({ [property]: value });\n        break;\n\n      case \"description\":\n        if (value.length > 100) {\n          value = value.substr(0, 100);\n        }\n        this.setState({ [property]: value });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  handleInputValidation = () => {\n    let valid = true;\n\n    const inputs = [\n      {\n        name: \"name\",\n        whitespaceMsg: \"*Please enter a name.\",\n      },\n      {\n        name: \"description\",\n        whitespaceMsg: \"*Please enter description.\",\n      },\n    ];\n\n    for (let input of inputs) {\n      const value = this.state[input.name];\n\n      if (!value.replace(/\\s/g, \"\").length) {\n        this.setState({\n          [input.name + \"ErrorMsg\"]: input.whitespaceMsg,\n          [input.name + \"Error\"]: true,\n        });\n        valid = false;\n        continue;\n      } else {\n        this.setState({\n          [input.name + \"ErrorMsg\"]: \"\",\n          [input.name + \"Error\"]: false,\n        });\n      }\n    }\n\n    return valid;\n  };\n\n  addThought = async () => {\n    if (this.handleInputValidation()) {\n      try {\n        const response = await axios.post(\n          `${URLs.baseURL}/wall/addPostit`,\n          {\n            name: this.state.name,\n            description: this.state.description,\n          }\n        );\n\n        if (response.data.success) {\n          this.toggleAddDialog();\n          alert(response.data.message);\n        } else {\n          alert(response.data.message);\n        }\n      } catch (error) {\n        console.log(\"Error with adding thought: \", error);\n        alert(\n          \"Error with adding thought. Please check the console for more info.\"\n        );\n      }\n    }\n  };\n\n  render() {\n    const classes = this.props.classes;\n\n    return (\n      <React.Fragment>\n        {/*add item dialog*/}\n        <Dialog open={this.state.showAddDialog} onClose={this.toggleAddDialog}>\n          <DialogTitle>\n            <span style={{ fontWeight: \"bold\" }}>Add a Thought</span>\n          </DialogTitle>\n          <DialogContent>\n            <Grid\n              container\n              justify=\"flex-start\"\n              alignItems=\"flex-start\"\n              spacing={2}\n            >\n              <Grid item xs={6}>\n                <TextField\n                  fullWidth\n                  variant=\"outlined\"\n                  label=\"Name\"\n                  size=\"small\"\n                  name=\"name\"\n                  value={this.state.name}\n                  onChange={this.handleChange}\n                  error={this.state.nameError}\n                  helperText={this.state.nameErrorMsg}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  multiline\n                  variant=\"outlined\"\n                  label=\"Description\"\n                  size=\"small\"\n                  name=\"description\"\n                  value={this.state.description}\n                  onChange={this.handleChange}\n                  error={this.state.descriptionError}\n                  helperText={this.state.descriptionErrorMsg}\n                />\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={this.toggleAddDialog}\n              className={classes.redButton}\n            >\n              Cancel\n            </Button>\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={this.addThought}\n              className={classes.greenButton}\n            >\n              Confirm\n            </Button>\n          </DialogActions>\n        </Dialog>\n        {/*top bar*/}\n        <Grid\n          container\n          spacing={2}\n          direction=\"row\"\n          justify=\"space-between\"\n          alignItems=\"center\"\n          style={{\n            backgroundColor: \"#E94057\",\n          }}\n        >\n          <Grid item>\n            <Typography variant=\"h3\" className={classes.name}>\n              Thought Wall\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Button\n              size=\"small\"\n              variant=\"contained\"\n              className={classes.button}\n              onClick={this.toggleAddDialog}\n            >\n              Add Thought\n            </Button>\n          </Grid>\n        </Grid>\n        {/*thought cards*/}\n        <br />\n        <Grid\n          container\n          spacing={2}\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <ThoughtList thoughts={this.state.thoughts} />\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}